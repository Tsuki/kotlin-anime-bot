import groovy.xml.MarkupBuilder
import org.jooq.util.GenerationTool

import static javax.xml.bind.JAXB.unmarshal

apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.researchgate.release'
apply plugin: 'org.flywaydb.flyway'


sourceCompatibility = 1.8
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // https://mvnrepository.com/artifact/org.flywaydb/flyway-gradle-plugin
        classpath group: 'org.flywaydb', name: 'flyway-gradle-plugin', version: '4.1.2'
        classpath 'org.jooq:jooq-codegen:3.9.1'
        classpath 'com.h2database:h2:1.4.177'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
}

flyway {
    url = 'jdbc:h2:file:./target/telegram'
//    user = ''
}

dependencies {
    testCompile "junit:junit:4.12"
    compile 'org.jooq:jooq:3.9.1'
    runtime 'com.h2database:h2:1.4.177'
    compile project(":bot-api")
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    // https://mvnrepository.com/artifact/com.google.inject/guice
    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    compile group: 'com.zaxxer', name: 'HikariCP', version: '2.6.1'


    compile 'io.vertx:vertx-web-client:3.4.1'
    compile 'io.vertx:vertx-jdbc-client:3.4.1'
    compile 'io.github.jklingsporn:vertx-jooq:1.0.0'
}


task generate << {
    def writer = new StringWriter()
    def xml = new MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.9.0.xsd') {
        jdbc() {
            driver('org.h2.Driver')
            url('jdbc:h2:file:./target/telegram')
            user('')
            password('')
        }
        generator() {
            database() {
//                inputSchema 'public'
                includes 'public.*'
                excludes 'public.schema_version'
            }

            // Watch out for this caveat when using MarkupBuilder with "reserved names"
            // - http://stackoverflow.com/a/11389034/521799
            // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
            generate([:]) {
                pojos true
                daos false
            }
            target() {
                packageName('com.sukitsuki.tgbot.jooq')
                directory('./bot/anime-bot/src/main/java')
            }
        }
    }
    // Run the code generator
    // ----------------------
    GenerationTool.generate(
            unmarshal(
                    new StringReader(writer.toString()),
                    org.jooq.util.jaxb.Configuration.class
            )
    )
}


